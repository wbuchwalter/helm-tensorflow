{{- $lrlist := .Values.training.LearningRateSweep -}}
{{- $nblayerslist := .Values.training.hiddenLayersSweep -}}
{{- $chartname := .Chart.Name -}}
{{- $chartversion := .Chart.Version -}}
{{- $repo := .Values.image.repository -}}
{{- $tag := .Values.image.tag -}}

{{- range $lr := $lrlist }}
{{- range $nblayers := $nblayerslist }}
apiVersion: batch/v1
kind: Job
metadata:
  name: tf-paint-lr{{ $lr }}-d-{{ $nblayers }}
  labels:
    chart: "{{ $chartname }}-{{ $chartversion | replace "+" "_" }}"
spec:      
  template:
    metadata:
      labels:
        app: tf-paint-lr{{ $lr }}-d-{{ $nblayers }}
    spec:
      restartPolicy: OnFailure
      containers:
      - name: {{ $chartname }}
        image: "{{ $repo }}:{{ $tag }}"
        env:
        - name: LD_LIBRARY_PATH
          value: /usr/lib/nvidia:/usr/lib/x86_64-linux-gnu
        - name: LC_ALL
          value: C.UTF-8
        command:
          - python
          - main.py
          - --learning-rate
          - {{ $lr | quote }}
          - --hidden-layers
          - {{ $nblayers | quote }}
          - --log-dir
          - /data/logs/tf-paint-lr{{ $lr }}-d-{{ $nblayers }}
        resources:
          requests:
            alpha.kubernetes.io/nvidia-gpu: 1 
          limits:
            alpha.kubernetes.io/nvidia-gpu: 1 
        volumeMounts:
        - mountPath: /usr/local/nvidia/bin
          name: bin
        - mountPath: /usr/lib/nvidia
          name: lib
        - mountPath: /usr/lib/x86_64-linux-gnu/libcuda.so.1
          name: libcuda
        - mountPath: /data
          name: azurefile
      volumes:
        - name: bin
          hostPath: 
            path: /usr/lib/nvidia-378/bin
        - name: lib
          hostPath: 
            path: /usr/lib/nvidia-378
        - name: libcuda
          hostPath:
            path: /usr/lib/x86_64-linux-gnu/libcuda.so.1 
        - name: azurefile
          azureFile:
              secretName: azure-secret
              shareName: tf-data
              readOnly: false
---
{{- end }}
{{- end }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: tensorboard
  name: tensorboard
spec:
  ports:
  - port: 80
    targetPort: 6006
  selector:
    app: tensorboard
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: tensorboard
  name: tensorboard
spec:
  template:
    metadata:
      labels:
        app: tensorboard
    spec:
      volumes:
      - name: azurefile
        azureFile:
            secretName: azure-secret
            shareName: tf-data
            readOnly: true      
      containers:
      - name: tensorboard
        command: ["/bin/sh", "-c"]
        args: ["tensorboard --logdir /data/logs --host 0.0.0.0"]
        image: tensorflow/tensorflow
        ports:
        - containerPort: 6006
        volumeMounts:
        - mountPath: /data
          name: azurefile  